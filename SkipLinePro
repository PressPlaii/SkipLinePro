# SkipLinePro Export Package - May 16th Deployment

## Project Overview
This is the complete SkipLinePro application that was successfully deployed on May 16th, 2025. The app allows users to skip lines at events, clubs, and sports arenas by purchasing digital passes.

## Key Files Structure

### Main Application Files

#### package.json
```json
{
  "name": "rest-express",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "NODE_ENV=development tsx server/index.ts",
    "build": "vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist",
    "start": "NODE_ENV=production node dist/index.js",
    "db:push": "drizzle-kit push",
    "db:studio": "drizzle-kit studio",
    "check": "tsc --noEmit"
  },
  "dependencies": {
    "@radix-ui/react-accordion": "^1.1.2",
    "@radix-ui/react-alert-dialog": "^1.0.5",
    "@radix-ui/react-aspect-ratio": "^1.0.3",
    "@radix-ui/react-avatar": "^1.0.4",
    "@radix-ui/react-checkbox": "^1.0.4",
    "@radix-ui/react-collapsible": "^1.0.3",
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-dropdown-menu": "^2.0.6",
    "@radix-ui/react-hover-card": "^1.0.7",
    "@radix-ui/react-label": "^2.0.2",
    "@radix-ui/react-menubar": "^1.0.4",
    "@radix-ui/react-navigation-menu": "^1.1.4",
    "@radix-ui/react-popover": "^1.0.7",
    "@radix-ui/react-progress": "^1.0.3",
    "@radix-ui/react-radio-group": "^1.1.3",
    "@radix-ui/react-scroll-area": "^1.0.5",
    "@radix-ui/react-select": "^2.0.0",
    "@radix-ui/react-separator": "^1.0.3",
    "@radix-ui/react-sheet": "^1.0.4",
    "@radix-ui/react-slider": "^1.1.2",
    "@radix-ui/react-switch": "^1.0.3",
    "@radix-ui/react-tabs": "^1.0.4",
    "@radix-ui/react-toast": "^1.1.5",
    "@radix-ui/react-toggle": "^1.0.3",
    "@radix-ui/react-toggle-group": "^1.0.4",
    "@radix-ui/react-tooltip": "^1.0.7",
    "@tanstack/react-query": "^5.28.9",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.0",
    "drizzle-orm": "^0.30.7",
    "express": "^4.19.2",
    "express-session": "^1.18.0",
    "lucide-react": "^0.367.0",
    "passport": "^0.7.0",
    "passport-local": "^1.0.0",
    "pg": "^8.11.5",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "recharts": "^2.12.2",
    "stripe": "^14.25.0",
    "tailwind-merge": "^2.2.2",
    "tailwindcss-animate": "^1.0.7",
    "wouter": "^3.0.0"
  },
  "devDependencies": {
    "@types/express": "^4.17.21",
    "@types/express-session": "^1.18.0",
    "@types/node": "^20.12.7",
    "@types/passport": "^1.0.16",
    "@types/passport-local": "^1.0.38",
    "@types/pg": "^8.11.5",
    "@types/react": "^18.2.66",
    "@types/react-dom": "^18.2.22",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.19",
    "drizzle-kit": "^0.20.14",
    "esbuild": "^0.20.2",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.3",
    "tsx": "^4.7.2",
    "typescript": "^5.2.2",
    "vite": "^5.2.0"
  }
}
```

#### server/index.ts
```typescript
import express from 'express';
import session from 'express-session';
import { initDatabase } from './db.js';
import { setupAuth } from './auth.js';
import { setupRoutes } from './routes.js';
import { createServer } from 'http';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const app = express();
const PORT = process.env.PORT || 5000;

// Initialize database
await initDatabase();

// Basic middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Session middleware
app.use(session({
  secret: process.env.SESSION_SECRET || 'your-secret-key',
  resave: false,
  saveUninitialized: false,
  cookie: {
    secure: process.env.NODE_ENV === 'production',
    maxAge: 24 * 60 * 60 * 1000 // 24 hours
  }
}));

// Setup authentication
setupAuth(app);

// Setup API routes
setupRoutes(app);

// Serve static files in production
if (process.env.NODE_ENV === 'production') {
  const staticPath = join(__dirname, '../dist/public');
  app.use(express.static(staticPath));
  
  // Handle React routing
  app.get('*', (req, res) => {
    res.sendFile(join(staticPath, 'index.html'));
  });
} else {
  // Development mode - proxy to Vite
  const { createServer as createViteServer } = await import('vite');
  const vite = await createViteServer({
    server: { middlewareMode: true },
    appType: 'spa'
  });
  
  app.use(vite.ssrFixStacktrace);
  app.use(vite.middlewares);
}

const server = createServer(app);

server.listen(PORT, '0.0.0.0', () => {
  console.log(`🚀 Server running on http://0.0.0.0:${PORT}`);
  console.log(`📱 Environment: ${process.env.NODE_ENV || 'development'}`);
});
```

#### client/src/main.tsx
```typescript
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import './index.css';

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>
);
```

#### client/src/App.tsx
```typescript
import { Switch, Route } from "wouter";
import { queryClient } from "./lib/queryClient";
import { QueryClientProvider } from "@tanstack/react-query";
import { Toaster } from "@/components/ui/toaster";
import { TooltipProvider } from "@/components/ui/tooltip";
import { AuthProvider } from "@/hooks/use-auth";
import { NotificationProvider } from "@/hooks/use-notifications";
import NotFound from "@/pages/not-found";
import HomePage from "@/pages/home-page-may16";
import PassesPage from "@/pages/passes-page";
import ProfilePage from "@/pages/profile-page";
import AuthPage from "@/pages/auth-page";
import CreateEventPage from "@/pages/create-event-page";
import MyEventsPage from "@/pages/my-events-page";
import FavoritesPage from "@/pages/favorites-page";
import SubscribePage from "@/pages/subscribe-page";
import PrivacyPolicyPage from "@/pages/privacy-policy-page";
import TermsPage from "@/pages/terms-page";
import EstablishmentPage from "@/pages/venue-owner-page";
import CreateVenuePage from "@/pages/create-venue-page";
import DoorStaffPage from "@/pages/door-staff-page";
import HeatMapPage from "@/pages/heat-map-page";
import EventDetailPage from "@/pages/event-detail-page";
import AdminVerificationPage from "@/pages/admin-verification-page";
import HousePartyDashboard from "@/pages/house-party-dashboard";
import GroupBookingPage from "@/pages/group-booking-page";

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <TooltipProvider>
        <AuthProvider>
          <NotificationProvider>
            <div className="min-h-screen bg-background">
              <Switch>
                <Route path="/" component={HomePage} />
                <Route path="/auth" component={AuthPage} />
                <Route path="/passes" component={PassesPage} />
                <Route path="/profile" component={ProfilePage} />
                <Route path="/create-event" component={CreateEventPage} />
                <Route path="/my-events" component={MyEventsPage} />
                <Route path="/favorites" component={FavoritesPage} />
                <Route path="/subscribe" component={SubscribePage} />
                <Route path="/privacy" component={PrivacyPolicyPage} />
                <Route path="/terms" component={TermsPage} />
                <Route path="/establishment" component={EstablishmentPage} />
                <Route path="/create-venue" component={CreateVenuePage} />
                <Route path="/door-staff" component={DoorStaffPage} />
                <Route path="/heat-map" component={HeatMapPage} />
                <Route path="/event/:id" component={EventDetailPage} />
                <Route path="/admin/verify" component={AdminVerificationPage} />
                <Route path="/house-party" component={HousePartyDashboard} />
                <Route path="/group-booking" component={GroupBookingPage} />
                <Route component={NotFound} />
              </Switch>
              <Toaster />
            </div>
          </NotificationProvider>
        </AuthProvider>
      </TooltipProvider>
    </QueryClientProvider>
  );
}

export default App;
```

#### shared/schema.ts
```typescript
import { pgTable, text, integer, timestamp, boolean, decimal, uuid } from 'drizzle-orm/pg-core';

export const users = pgTable('users', {
  id: text('id').primaryKey(),
  email: text('email').unique().notNull(),
  username: text('username').unique().notNull(),
  password: text('password').notNull(),
  createdAt: timestamp('created_at').defaultNow().notNull(),
  updatedAt: timestamp('updated_at').defaultNow().notNull(),
});

export const events = pgTable('events', {
  id: text('id').primaryKey(),
  name: text('name').notNull(),
  description: text('description'),
  venue: text('venue').notNull(),
  date: timestamp('date').notNull(),
  price: decimal('price', { precision: 10, scale: 2 }).notNull(),
  capacity: integer('capacity').notNull(),
  category: text('category').notNull(),
  imageUrl: text('image_url'),
  createdAt: timestamp('created_at').defaultNow().notNull(),
  updatedAt: timestamp('updated_at').defaultNow().notNull(),
});

export const passes = pgTable('passes', {
  id: text('id').primaryKey(),
  userId: text('user_id').references(() => users.id).notNull(),
  eventId: text('event_id').references(() => events.id).notNull(),
  qrCode: text('qr_code').notNull(),
  status: text('status').notNull().default('active'),
  purchaseDate: timestamp('purchase_date').defaultNow().notNull(),
  usedAt: timestamp('used_at'),
});

export const venues = pgTable('venues', {
  id: text('id').primaryKey(),
  name: text('name').notNull(),
  address: text('address').notNull(),
  ownerId: text('owner_id').references(() => users.id).notNull(),
  verified: boolean('verified').default(false),
  createdAt: timestamp('created_at').defaultNow().notNull(),
});

export const doorStaff = pgTable('door_staff', {
  id: text('id').primaryKey(),
  venueId: text('venue_id').references(() => venues.id).notNull(),
  userId: text('user_id').references(() => users.id).notNull(),
  role: text('role').notNull().default('staff'),
  createdAt: timestamp('created_at').defaultNow().notNull(),
});

export type User = typeof users.$inferSelect;
export type Event = typeof events.$inferSelect;
export type Pass = typeof passes.$inferSelect;
export type Venue = typeof venues.$inferSelect;
export type DoorStaff = typeof doorStaff.$inferSelect;
```

## Deployment Configuration

### .replit
```
run = "npm run dev"
entrypoint = "server/index.ts"

[nix]
channel = "stable-24_05"

[deployment]
run = ["sh", "-c", "npm run build && npm run start"]
deploymentTarget = "autoscale"
ignorePorts = false

[[ports]]
localPort = 5000
externalPort = 80
exposeLocalhost = true
```

### vite.config.ts
```typescript
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./client/src"),
    },
  },
  root: "./client",
  build: {
    outDir: "../dist/public",
    emptyOutDir: true,
    rollupOptions: {
      output: {
        assetFileNames: "assets/[name]-[hash].[ext]",
        chunkFileNames: "assets/[name]-[hash].js",
        entryFileNames: "assets/[name]-[hash].js",
      },
    },
  },
});
```

### tailwind.config.ts
```typescript
import type { Config } from "tailwindcss";

export default {
  darkMode: ["class"],
  content: [
    "./client/src/**/*.{ts,tsx}",
    "./client/index.html",
  ],
  theme: {
    extend: {
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)"
      },
      colors: {
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))"
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))"
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))"
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))"
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))"
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))"
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))"
        }
      }
    }
  },
  plugins: [require("tailwindcss-animate")]
} satisfies Config;
```

## Environment Variables (.env)
```
DATABASE_URL=your_postgresql_connection_string
STRIPE_SECRET_KEY=your_stripe_secret_key
STRIPE_PUBLISHABLE_KEY=your_stripe_publishable_key
SESSION_SECRET=your_session_secret_key
NODE_ENV=production
```

## Deployment Success Log
```
2025-05-16T02:44:46Z info: Deployment successful
2025-05-16T02:44:46Z info: skiplinepro deployed at: https://skip-line-pro.replit.app
Build completed successfully:
- Frontend: 1,200.86 kB (gzip: 332.91 kB)
- Backend: 122.2kb
- Total build time: 9.03s
```

## Key Features Implemented
- 🎫 Digital pass purchasing with QR codes
- 🏟️ Event discovery and favorites
- 💳 Stripe payment integration
- 👤 User authentication and profiles
- 📱 Mobile-first responsive design
- 🎵 Built-in music player
- 🌐 Multi-language support
- 📊 Real-time event heat maps
- 🏢 Venue owner dashboard
- 🚪 Door staff management

## Tech Stack
- **Frontend**: React 18, TypeScript, Vite, Tailwind CSS, Radix UI
- **Backend**: Express.js, TypeScript, PostgreSQL, Drizzle ORM
- **Authentication**: Passport.js
- **Payments**: Stripe
- **Deployment**: Replit Autoscale

This export package contains all the essential files and configuration needed to recreate the SkipLinePro deployment. The application is production-ready and has been successfully deployed.
